import os
import logging
import threading
import asyncio
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes

# Logging ‡§ï‡•ã ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- ‡§ö‡•à‡§®‡§≤ ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ---
# ‡§Ø‡§π‡•Ä‡§Ç ‡§™‡§∞ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§∏‡§≠‡•Ä ‡§ö‡•à‡§®‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§
CHANNELS = {
    "hentai": {
        "message": "Here is your link! Click below to proceed:",
        "button_text": "üîî Request to Join",
        "link": "https://t.me/+ypMzwwRrx1I1NGZl"  # <<--- ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡§æ ‡§Ö‡§∏‡§≤‡•Ä ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§≤‡§ø‡§Ç‡§ï ‡§°‡§æ‡§≤‡•á‡§Ç
    },
    "parody": {
        "message": "Here is your link! Click below to proceed:",
        "button_text": "üîî Request to Join",
        "link": "https://t.me/+G_BZgtePcARkN2M1" # <<--- ‡§Ø‡§π‡§æ‡§Å ‡§Ö‡§™‡§®‡§æ ‡§Ö‡§∏‡§≤‡•Ä ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§≤‡§ø‡§Ç‡§ï ‡§°‡§æ‡§≤‡•á‡§Ç
    },
    # ‡§Ü‡§™ ‡§Ø‡§π‡§æ‡§Å ‡§î‡§∞ ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç...
}

# --- ‡§¨‡•â‡§ü ‡§ï‡•á ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡§Ø‡§π ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§§‡§¨ ‡§ö‡§≤‡§§‡§æ ‡§π‡•à ‡§ú‡§¨ ‡§ï‡•ã‡§à ‡§Ø‡•Ç‡§ú‡§∞ /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§≠‡•á‡§ú‡§§‡§æ ‡§π‡•à‡•§"""
    user = update.effective_user
    args = context.args

    if args:
        channel_key = args[0]
        channel_data = CHANNELS.get(channel_key)

        if channel_data:
            keyboard = [[InlineKeyboardButton(channel_data["button_text"], url=channel_data["link"])]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(channel_data["message"], reply_markup=reply_markup)
        else:
            await update.message.reply_text(f"‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user.mention_html()}!\n\n‡§Ø‡§π ‡§≤‡§ø‡§Ç‡§ï ‡§∂‡§æ‡§Ø‡§¶ ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§", parse_mode='HTML')
    else:
        await update.message.reply_text(f"‡§®‡§Æ‡§∏‡•ç‡§§‡•á {user.mention_html()}!\n\n‡§Ø‡§π ‡§è‡§ï ‡§ó‡•á‡§ü‡§µ‡•á ‡§¨‡•â‡§ü ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡•à‡§®‡§≤ ‡§™‡§∞ ‡§ú‡§æ‡§ï‡§∞ ‡§ï‡§ø‡§∏‡•Ä ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§", parse_mode='HTML')

# --- Render.com ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•á‡§¨ ‡§∏‡§∞‡•ç‡§µ‡§∞ ---
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running!"

# --- ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡§æ ---
def run_bot_polling(application):
    """‡§Ø‡§π ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§è‡§ï ‡§®‡§è ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§ö‡§≤‡§æ‡§§‡§æ ‡§π‡•à‡•§"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(application.run_polling())
    finally:
        loop.close()

# --- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ---
if __name__ == "__main__":
    BOT_TOKEN = os.environ.get("BOT_TOKEN")
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN ‡§è‡§®‡§µ‡§æ‡§Ø‡§∞‡§®‡§Æ‡•á‡§Ç‡§ü ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!")

    # Telegram ‡§è‡§™‡•ç‡§≤‡•Ä‡§ï‡•á‡§∂‡§® ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))

    # ‡§è‡§ï ‡§Ö‡§≤‡§ó ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§Ç
    bot_thread = threading.Thread(target=run_bot_polling, args=(application,), daemon=True)
    bot_thread.start()
    
    logger.info("‡§¨‡•â‡§ü ‡§ï‡§æ ‡§•‡•ç‡§∞‡•á‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ Gunicorn ‡§Ö‡§¨ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§•‡•ç‡§∞‡•á‡§° ‡§ï‡•ã ‡§∏‡§Ç‡§≠‡§æ‡§≤‡•á‡§ó‡§æ‡•§")
    
    # Gunicorn ‡§á‡§∏ 'app' ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•ã ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§ó‡§æ ‡§î‡§∞ ‡§ö‡§≤‡§æ‡§è‡§ó‡§æ‡•§
